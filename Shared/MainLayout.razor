@inherits LayoutComponentBase
@using Newtonsoft.Json;
<PageTitle>FinanceApp</PageTitle>
@inject IJSRuntime JSRuntime

@using FinanceApp.Services;
@using Microsoft.JSInterop
@using Radzen.Blazor
@inject ISaveService SaveService
@using Newtonsoft.Json.Linq
@using FinanceApp.Models;
@using System.Net;
@using Microsoft.AspNetCore.Components;
@using System.Text;

<style>
    .loading-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        /* semi-transparent white */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        /* Ensure it's on top */
    }

    ul.rz-profile-menu {
        list-style: none;
        margin-bottom: 0;
        padding: var(--rz-profile-menu-padding);
        display: inline-block;
        background-color: transparent;
        border-left: var(--rz-profile-menu-border);
        position: relative;
        z-index: 3;
    }

    .rz-navigation-item-link {
        display: flex;
        align-items: center;
        cursor: pointer;
        color: transparent;
    }

    ul {
        list-style: none;
        align-items: center;
    }

    .display-picture {
        margin-left: auto;
    }

    .display-picture img {
        max-width: 50px;
        border-radius: 50%;
        border: 2px solid #000;
    }

    .display-picture img:hover {
        border: 2px solid #E78341;
    }

    .w-90 {
        width: 90% !important;
    }

    #header img {
        margin-right: 10px;
        height: 40px;
    }

    #header-content {
        margin-right: auto;
    }

    #header p {
        margin: 0;
        font-size: 1.5rem;
    }

    .header_center {
        width: 100%;
        display: flex;
        align-items: center;
    }

    .header_center img {
        margin-right: 10px;
    }

    #header-content {
        margin-left: 10px;
        text-align: center;
        display: flex;
        flex-wrap: nowrap;
        justify-content: center;
        width: 100%;
    }

    #header-rcontent {
        margin-right: auto;
    }

    .header_right {
        display: flex;
        align-items: center;
    }

    #header-rcontent {
        margin-left: 10px;
        text-align: center;
        display: flex;
        flex-wrap: nowrap;
        justify-content: center;
        width: 100%;
    }

    .rz-text-align-center {
        text-align: end;
    }

    .rz-p-12 {
        padding: 1rem !important;
    }

    .rz-button.rz-primary.rz-shade-default {
        background-color: #ffffff;
        color: #000000;
        box-shadow: none;
    }

    .justify-content-center {
        justify-content: center !important;
    }

    .shadow-sm {
        box-shadow: var(--bs-box-shadow-sm) !important;
        background-color: #fff;
    }
</style>
<div id="body-pd">
    <header class="header shadow-sm" id="header">
        <div class="header_toggle">
            @* <i class='material-icons' id="header-toggle"></i> *@
            <i class='fa fa-bars' id="header-toggle"></i>
        </div>
        <div class="header_center">
            <div id="header-content">
                <img src="https://www.freepnglogos.com/uploads/starbucks-logo-png-transparent-0.png" alt="Logo">
                <p>@Coop_name</p>
                <!-- Add more content or links here if needed -->
            </div>
        </div>
        <div class="header_right">
            <div id="header-rcontent">
                <div class="nav-right">
                    @* <RadzenIcon Icon="save" /><span>Save</span> *@
                    @* <RadzenButton Icon="save" Text="Save" Click="@SaveData" /> *@
                </div>
                <div class="nav-right">
                    @* <RadzenIcon Icon="insert_drive_file" /><span>Report</span> *@
                    <RadzenButton Icon="insert_drive_file" Text="Report" Click="@Report" />
                </div>
                <div class="nav-right">
                    @* <RadzenIcon Icon="" /><a href=""><span>App</span></a> *@
                    <RadzenButton Icon="grid_view" Text="App" Click="@AppAll" />
                </div>
            </div>
        </div>
        <div class="rz-p-12 rz-text-align-center">
            <RadzenProfileMenu>
                <Template>
                    <nav>
                        <ul>
                            <a href="#" class="display-picture"><img src="https://i.pravatar.cc/85" alt=""></a>
                            @* <a href="#" class="display-picture"><img
                            src="https://www.finearts.cmu.ac.th/wp-content/uploads/2021/07/blank-profile-picture-973460_1280-1.png"
                            alt=""></a> *@
                        </ul>
                    </nav>
                </Template>
                <ChildContent>
                    <RadzenProfileMenuItem Text="Profile" Path="people/profile" Icon="manage_accounts">
                    </RadzenProfileMenuItem>
                    <RadzenProfileMenuItem Text="Password" Path="menu" Icon="password"></RadzenProfileMenuItem>
                    <RadzenProfileMenuItem Text="FileInput" Path="fileinput" Icon="attach_file"></RadzenProfileMenuItem>
                    <RadzenProfileMenuItem Text="Dialog" Path="dialog" Icon="perm_media"></RadzenProfileMenuItem>
                    <RadzenProfileMenu @onclick="@LogOff" Style="padding: 0px;">
                        <Template>
                            <RadzenProfileMenuItem Text="LogOff" Style="padding: 0px;margin-left: -15px;" Icon="logout">
                            </RadzenProfileMenuItem>
                        </Template>
                    </RadzenProfileMenu>
                </ChildContent>
            </RadzenProfileMenu>

        </div>
    </header>
    <div class="l-navbar shadow-sm mt-6" id="nav-bar">
        <Sidebar />
    </div>
    <div class="height-100hv">
        <div class="d-flex justify-content-center py-2" style="background-color: rgb(159, 243, 205);">
            <RadzenNotification />
            <div class="w-90" style="background-color: rgb(159, 243, 205);">
                @Body
            </div>
        </div>
    </div>

</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    private string Coop_name;
    private string baseType;
    

    @* protected override async Task OnInitializedAsync()
    {
        await BaseType();
    } *@

    private async Task BaseType()
    {
        baseType = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "base_type");
        @* Console.WriteLine($"baseType: {baseType}"); *@
        if (baseType == "4654564654")
        {
            Coop_name = "สหกรณ์ออมทรัพย์การไฟฟ้าฝ่ายผลิตแห่งประเทศไทย จำกัด";
        }else{
            Coop_name = "เบสเทส สหกรณ์ออมทรัพย์การไฟฟ้าฝ่ายผลิตแห่งประเทศไทย จำกัด";
        }
    }
    @* protected override async Task OnInitializedAsync()
    {
        // เรียกใช้ JavaScript Interop เพื่อโหลดไฟล์ sessionInterop.js
        await JSRuntime.InvokeVoidAsync("loadScript", "js/sessionInterop.js");
    } *@

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupNavbar");
            await BaseType();
            await JSRuntime.InvokeVoidAsync("loadScript", "js/sessionInterop.js");
            // Get the stored windowIds
            var jsons = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "winObject");
            // Assuming this code is inside an asynchronous method or event handler
            if (await IsUserAuthenticated())
            {
                // Get the current page windowId (replace this with your logic to get the current windowId)
                var currentPageWindowId = GetCurrentPageWindowId();
                Console.WriteLine($"currentPageWindowId: {currentPageWindowId}");

                // Get the stored token
                string bearerToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

                // Get the stored applications
                var applications = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "application");
                // Deserialize the stored windowIds
                var windowIdData = JsonConvert.DeserializeObject<WindowIdData>(jsons);
                // Check if the deserialization was successful and windowIds exist
                if (windowIdData != null && windowIdData.winObject != null)
                {
                    bool isMatch = windowIdData.winObject.Any(windowId => windowId.Trim() == currentPageWindowId.Trim());

                    if (!isMatch && currentPageWindowId != applications)
                    {
                        NavigationManager.NavigateTo("/index", true);
                        Console.WriteLine($"No match for {currentPageWindowId}");
                    }
                }
                else
                {
                    Console.WriteLine("Error deserializing or empty WindowIds array.");
                }
            }
            else
            {
                // ลบ token จาก localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
            }
            StateHasChanged();
        }
    }
    private async Task<bool> IsUserAuthenticated()
    {
        // Check if there is a valid token
        string bearerToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        return !string.IsNullOrEmpty(bearerToken);
    }
    private string GetCurrentPageWindowId()
    {
        string currentUrl = NavigationManager.Uri;
        // ดึงส่วน path ต่อจากโดเมนและพร็อทโคลอน
        string path = new Uri(currentUrl).AbsolutePath;

        // ตัด '/' ด้านหน้า
        path = path.TrimStart('/');

        Console.WriteLine($"Remaining Path: {path}");
        return path;

    }
    public class WindowIdData
    {
        public List<string> winObject { get; set; }
    }
    private void AppAll()
    {
        NavigationManager.NavigateTo("index");
    }
    void LogOff()
    {

        // Navigate to the login page
        NavigationManager.NavigateTo("Login");
        Console.WriteLine("logout");
        // Remove authToken
        JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        // Force a page reload using JavaScript interop
        JSRuntime.InvokeVoidAsync("location.reload");
    }
    private void Report()
    {
        string currentUrl = NavigationManager.Uri;
        Console.WriteLine($"Current URL: {currentUrl}");
    }

}
